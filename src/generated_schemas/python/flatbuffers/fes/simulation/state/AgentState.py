# automatically generated by the FlatBuffers compiler, do not modify

# namespace: state

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class AgentState(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = AgentState()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsAgentState(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # AgentState
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # AgentState
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # AgentState
    def Pos(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from fes.simulation.state.Vec2f import Vec2f
            obj = Vec2f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def AgentStateStart(builder):
    builder.StartObject(2)

def Start(builder):
    AgentStateStart(builder)

def AgentStateAddId(builder, id):
    builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)

def AddId(builder, id):
    AgentStateAddId(builder, id)

def AgentStateAddPos(builder, pos):
    builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(pos), 0)

def AddPos(builder, pos):
    AgentStateAddPos(builder, pos)

def AgentStateEnd(builder):
    return builder.EndObject()

def End(builder):
    return AgentStateEnd(builder)
