# automatically generated by the FlatBuffers compiler, do not modify

# namespace: state

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class WorldStateUpdate(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAs(cls, buf, offset=0):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = WorldStateUpdate()
        x.Init(buf, n + offset)
        return x

    @classmethod
    def GetRootAsWorldStateUpdate(cls, buf, offset=0):
        """This method is deprecated. Please switch to GetRootAs."""
        return cls.GetRootAs(buf, offset)
    # WorldStateUpdate
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # WorldStateUpdate
    def TimestampNs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int64Flags, o + self._tab.Pos)
        return 0

    # WorldStateUpdate
    def SimulationId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # WorldStateUpdate
    def CurrentTick(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint64Flags, o + self._tab.Pos)
        return 0

    # WorldStateUpdate
    def Agents(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from fes.simulation.state.AgentState import AgentState
            obj = AgentState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WorldStateUpdate
    def AgentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldStateUpdate
    def AgentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # WorldStateUpdate
    def FoodPellets(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from fes.simulation.state.FoodPelletState import FoodPelletState
            obj = FoodPelletState()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # WorldStateUpdate
    def FoodPelletsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # WorldStateUpdate
    def FoodPelletsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def WorldStateUpdateStart(builder):
    builder.StartObject(5)

def Start(builder):
    WorldStateUpdateStart(builder)

def WorldStateUpdateAddTimestampNs(builder, timestampNs):
    builder.PrependInt64Slot(0, timestampNs, 0)

def AddTimestampNs(builder, timestampNs):
    WorldStateUpdateAddTimestampNs(builder, timestampNs)

def WorldStateUpdateAddSimulationId(builder, simulationId):
    builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(simulationId), 0)

def AddSimulationId(builder, simulationId):
    WorldStateUpdateAddSimulationId(builder, simulationId)

def WorldStateUpdateAddCurrentTick(builder, currentTick):
    builder.PrependUint64Slot(2, currentTick, 0)

def AddCurrentTick(builder, currentTick):
    WorldStateUpdateAddCurrentTick(builder, currentTick)

def WorldStateUpdateAddAgents(builder, agents):
    builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(agents), 0)

def AddAgents(builder, agents):
    WorldStateUpdateAddAgents(builder, agents)

def WorldStateUpdateStartAgentsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartAgentsVector(builder, numElems):
    return WorldStateUpdateStartAgentsVector(builder, numElems)

def WorldStateUpdateAddFoodPellets(builder, foodPellets):
    builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(foodPellets), 0)

def AddFoodPellets(builder, foodPellets):
    WorldStateUpdateAddFoodPellets(builder, foodPellets)

def WorldStateUpdateStartFoodPelletsVector(builder, numElems):
    return builder.StartVector(4, numElems, 4)

def StartFoodPelletsVector(builder, numElems):
    return WorldStateUpdateStartFoodPelletsVector(builder, numElems)

def WorldStateUpdateEnd(builder):
    return builder.EndObject()

def End(builder):
    return WorldStateUpdateEnd(builder)
