// automatically generated by the FlatBuffers compiler, do not modify


// @generated

use core::mem;
use core::cmp::Ordering;

extern crate flatbuffers;
use self::flatbuffers::{EndianScalar, Follow};

#[allow(unused_imports, dead_code)]
pub mod fes {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod simulation {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};
#[allow(unused_imports, dead_code)]
pub mod state {

  use core::mem;
  use core::cmp::Ordering;

  extern crate flatbuffers;
  use self::flatbuffers::{EndianScalar, Follow};

// struct Vec2f, aligned to 4
#[repr(transparent)]
#[derive(Clone, Copy, PartialEq)]
pub struct Vec2f(pub [u8; 8]);
impl Default for Vec2f { 
  fn default() -> Self { 
    Self([0; 8])
  }
}
impl core::fmt::Debug for Vec2f {
  fn fmt(&self, f: &mut core::fmt::Formatter) -> core::fmt::Result {
    f.debug_struct("Vec2f")
      .field("x", &self.x())
      .field("y", &self.y())
      .finish()
  }
}

impl flatbuffers::SimpleToVerifyInSlice for Vec2f {}
impl<'a> flatbuffers::Follow<'a> for Vec2f {
  type Inner = &'a Vec2f;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    <&'a Vec2f>::follow(buf, loc)
  }
}
impl<'a> flatbuffers::Follow<'a> for &'a Vec2f {
  type Inner = &'a Vec2f;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    flatbuffers::follow_cast_ref::<Vec2f>(buf, loc)
  }
}
impl<'b> flatbuffers::Push for Vec2f {
    type Output = Vec2f;
    #[inline]
    unsafe fn push(&self, dst: &mut [u8], _written_len: usize) {
        let src = ::core::slice::from_raw_parts(self as *const Vec2f as *const u8, <Self as flatbuffers::Push>::size());
        dst.copy_from_slice(src);
    }
    #[inline]
    fn alignment() -> flatbuffers::PushAlignment {
        flatbuffers::PushAlignment::new(4)
    }
}

impl<'a> flatbuffers::Verifiable for Vec2f {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.in_buffer::<Self>(pos)
  }
}

impl<'a> Vec2f {
  #[allow(clippy::too_many_arguments)]
  pub fn new(
    x: f32,
    y: f32,
  ) -> Self {
    let mut s = Self([0; 8]);
    s.set_x(x);
    s.set_y(y);
    s
  }

  pub fn x(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[0..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_x(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[0..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

  pub fn y(&self) -> f32 {
    let mut mem = core::mem::MaybeUninit::<<f32 as EndianScalar>::Scalar>::uninit();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    EndianScalar::from_little_endian(unsafe {
      core::ptr::copy_nonoverlapping(
        self.0[4..].as_ptr(),
        mem.as_mut_ptr() as *mut u8,
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
      mem.assume_init()
    })
  }

  pub fn set_y(&mut self, x: f32) {
    let x_le = x.to_little_endian();
    // Safety:
    // Created from a valid Table for this object
    // Which contains a valid value in this slot
    unsafe {
      core::ptr::copy_nonoverlapping(
        &x_le as *const _ as *const u8,
        self.0[4..].as_mut_ptr(),
        core::mem::size_of::<<f32 as EndianScalar>::Scalar>(),
      );
    }
  }

}

pub enum AgentStateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct AgentState<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for AgentState<'a> {
  type Inner = AgentState<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> AgentState<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    AgentState { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args AgentStateArgs<'args>
  ) -> flatbuffers::WIPOffset<AgentState<'bldr>> {
    let mut builder = AgentStateBuilder::new(_fbb);
    if let Some(x) = args.pos { builder.add_pos(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(AgentState::VT_ID, None).unwrap()}
  }
  #[inline]
  pub fn key_compare_less_than(&self, o: &AgentState) -> bool {
    self.id() < o.id()
  }

  #[inline]
  pub fn key_compare_with_value(&self, val: & str) -> ::core::cmp::Ordering {
    let key = self.id();
    key.cmp(val)
  }
  #[inline]
  pub fn pos(&self) -> &'a Vec2f {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2f>(AgentState::VT_POS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for AgentState<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, true)?
     .visit_field::<Vec2f>("pos", Self::VT_POS, true)?
     .finish();
    Ok(())
  }
}
pub struct AgentStateArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pos: Option<&'a Vec2f>,
}
impl<'a> Default for AgentStateArgs<'a> {
  #[inline]
  fn default() -> Self {
    AgentStateArgs {
      id: None, // required field
      pos: None, // required field
    }
  }
}

pub struct AgentStateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> AgentStateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(AgentState::VT_ID, id);
  }
  #[inline]
  pub fn add_pos(&mut self, pos: &Vec2f) {
    self.fbb_.push_slot_always::<&Vec2f>(AgentState::VT_POS, pos);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> AgentStateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    AgentStateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<AgentState<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, AgentState::VT_ID,"id");
    self.fbb_.required(o, AgentState::VT_POS,"pos");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for AgentState<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("AgentState");
      ds.field("id", &self.id());
      ds.field("pos", &self.pos());
      ds.finish()
  }
}
pub enum FoodPelletStateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct FoodPelletState<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for FoodPelletState<'a> {
  type Inner = FoodPelletState<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> FoodPelletState<'a> {
  pub const VT_ID: flatbuffers::VOffsetT = 4;
  pub const VT_POS: flatbuffers::VOffsetT = 6;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    FoodPelletState { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args FoodPelletStateArgs<'args>
  ) -> flatbuffers::WIPOffset<FoodPelletState<'bldr>> {
    let mut builder = FoodPelletStateBuilder::new(_fbb);
    if let Some(x) = args.pos { builder.add_pos(x); }
    if let Some(x) = args.id { builder.add_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(FoodPelletState::VT_ID, None).unwrap()}
  }
  #[inline]
  pub fn key_compare_less_than(&self, o: &FoodPelletState) -> bool {
    self.id() < o.id()
  }

  #[inline]
  pub fn key_compare_with_value(&self, val: & str) -> ::core::cmp::Ordering {
    let key = self.id();
    key.cmp(val)
  }
  #[inline]
  pub fn pos(&self) -> &'a Vec2f {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<Vec2f>(FoodPelletState::VT_POS, None).unwrap()}
  }
}

impl flatbuffers::Verifiable for FoodPelletState<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("id", Self::VT_ID, true)?
     .visit_field::<Vec2f>("pos", Self::VT_POS, true)?
     .finish();
    Ok(())
  }
}
pub struct FoodPelletStateArgs<'a> {
    pub id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub pos: Option<&'a Vec2f>,
}
impl<'a> Default for FoodPelletStateArgs<'a> {
  #[inline]
  fn default() -> Self {
    FoodPelletStateArgs {
      id: None, // required field
      pos: None, // required field
    }
  }
}

pub struct FoodPelletStateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> FoodPelletStateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_id(&mut self, id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(FoodPelletState::VT_ID, id);
  }
  #[inline]
  pub fn add_pos(&mut self, pos: &Vec2f) {
    self.fbb_.push_slot_always::<&Vec2f>(FoodPelletState::VT_POS, pos);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> FoodPelletStateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    FoodPelletStateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<FoodPelletState<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, FoodPelletState::VT_ID,"id");
    self.fbb_.required(o, FoodPelletState::VT_POS,"pos");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for FoodPelletState<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("FoodPelletState");
      ds.field("id", &self.id());
      ds.field("pos", &self.pos());
      ds.finish()
  }
}
pub enum WorldStateUpdateOffset {}
#[derive(Copy, Clone, PartialEq)]

pub struct WorldStateUpdate<'a> {
  pub _tab: flatbuffers::Table<'a>,
}

impl<'a> flatbuffers::Follow<'a> for WorldStateUpdate<'a> {
  type Inner = WorldStateUpdate<'a>;
  #[inline]
  unsafe fn follow(buf: &'a [u8], loc: usize) -> Self::Inner {
    Self { _tab: flatbuffers::Table::new(buf, loc) }
  }
}

impl<'a> WorldStateUpdate<'a> {
  pub const VT_TIMESTAMP_NS: flatbuffers::VOffsetT = 4;
  pub const VT_SIMULATION_ID: flatbuffers::VOffsetT = 6;
  pub const VT_CURRENT_TICK: flatbuffers::VOffsetT = 8;
  pub const VT_AGENTS: flatbuffers::VOffsetT = 10;
  pub const VT_FOOD_PELLETS: flatbuffers::VOffsetT = 12;

  #[inline]
  pub unsafe fn init_from_table(table: flatbuffers::Table<'a>) -> Self {
    WorldStateUpdate { _tab: table }
  }
  #[allow(unused_mut)]
  pub fn create<'bldr: 'args, 'args: 'mut_bldr, 'mut_bldr, A: flatbuffers::Allocator + 'bldr>(
    _fbb: &'mut_bldr mut flatbuffers::FlatBufferBuilder<'bldr, A>,
    args: &'args WorldStateUpdateArgs<'args>
  ) -> flatbuffers::WIPOffset<WorldStateUpdate<'bldr>> {
    let mut builder = WorldStateUpdateBuilder::new(_fbb);
    builder.add_current_tick(args.current_tick);
    builder.add_timestamp_ns(args.timestamp_ns);
    if let Some(x) = args.food_pellets { builder.add_food_pellets(x); }
    if let Some(x) = args.agents { builder.add_agents(x); }
    if let Some(x) = args.simulation_id { builder.add_simulation_id(x); }
    builder.finish()
  }


  #[inline]
  pub fn timestamp_ns(&self) -> i64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<i64>(WorldStateUpdate::VT_TIMESTAMP_NS, Some(0)).unwrap()}
  }
  #[inline]
  pub fn simulation_id(&self) -> &'a str {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<&str>>(WorldStateUpdate::VT_SIMULATION_ID, None).unwrap()}
  }
  #[inline]
  pub fn current_tick(&self) -> u64 {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<u64>(WorldStateUpdate::VT_CURRENT_TICK, Some(0)).unwrap()}
  }
  #[inline]
  pub fn agents(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AgentState<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AgentState>>>>(WorldStateUpdate::VT_AGENTS, None)}
  }
  #[inline]
  pub fn food_pellets(&self) -> Option<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FoodPelletState<'a>>>> {
    // Safety:
    // Created from valid Table for this object
    // which contains a valid value in this slot
    unsafe { self._tab.get::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FoodPelletState>>>>(WorldStateUpdate::VT_FOOD_PELLETS, None)}
  }
}

impl flatbuffers::Verifiable for WorldStateUpdate<'_> {
  #[inline]
  fn run_verifier(
    v: &mut flatbuffers::Verifier, pos: usize
  ) -> Result<(), flatbuffers::InvalidFlatbuffer> {
    use self::flatbuffers::Verifiable;
    v.visit_table(pos)?
     .visit_field::<i64>("timestamp_ns", Self::VT_TIMESTAMP_NS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<&str>>("simulation_id", Self::VT_SIMULATION_ID, true)?
     .visit_field::<u64>("current_tick", Self::VT_CURRENT_TICK, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<AgentState>>>>("agents", Self::VT_AGENTS, false)?
     .visit_field::<flatbuffers::ForwardsUOffset<flatbuffers::Vector<'_, flatbuffers::ForwardsUOffset<FoodPelletState>>>>("food_pellets", Self::VT_FOOD_PELLETS, false)?
     .finish();
    Ok(())
  }
}
pub struct WorldStateUpdateArgs<'a> {
    pub timestamp_ns: i64,
    pub simulation_id: Option<flatbuffers::WIPOffset<&'a str>>,
    pub current_tick: u64,
    pub agents: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<AgentState<'a>>>>>,
    pub food_pellets: Option<flatbuffers::WIPOffset<flatbuffers::Vector<'a, flatbuffers::ForwardsUOffset<FoodPelletState<'a>>>>>,
}
impl<'a> Default for WorldStateUpdateArgs<'a> {
  #[inline]
  fn default() -> Self {
    WorldStateUpdateArgs {
      timestamp_ns: 0,
      simulation_id: None, // required field
      current_tick: 0,
      agents: None,
      food_pellets: None,
    }
  }
}

pub struct WorldStateUpdateBuilder<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> {
  fbb_: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
  start_: flatbuffers::WIPOffset<flatbuffers::TableUnfinishedWIPOffset>,
}
impl<'a: 'b, 'b, A: flatbuffers::Allocator + 'a> WorldStateUpdateBuilder<'a, 'b, A> {
  #[inline]
  pub fn add_timestamp_ns(&mut self, timestamp_ns: i64) {
    self.fbb_.push_slot::<i64>(WorldStateUpdate::VT_TIMESTAMP_NS, timestamp_ns, 0);
  }
  #[inline]
  pub fn add_simulation_id(&mut self, simulation_id: flatbuffers::WIPOffset<&'b  str>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WorldStateUpdate::VT_SIMULATION_ID, simulation_id);
  }
  #[inline]
  pub fn add_current_tick(&mut self, current_tick: u64) {
    self.fbb_.push_slot::<u64>(WorldStateUpdate::VT_CURRENT_TICK, current_tick, 0);
  }
  #[inline]
  pub fn add_agents(&mut self, agents: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<AgentState<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WorldStateUpdate::VT_AGENTS, agents);
  }
  #[inline]
  pub fn add_food_pellets(&mut self, food_pellets: flatbuffers::WIPOffset<flatbuffers::Vector<'b , flatbuffers::ForwardsUOffset<FoodPelletState<'b >>>>) {
    self.fbb_.push_slot_always::<flatbuffers::WIPOffset<_>>(WorldStateUpdate::VT_FOOD_PELLETS, food_pellets);
  }
  #[inline]
  pub fn new(_fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>) -> WorldStateUpdateBuilder<'a, 'b, A> {
    let start = _fbb.start_table();
    WorldStateUpdateBuilder {
      fbb_: _fbb,
      start_: start,
    }
  }
  #[inline]
  pub fn finish(self) -> flatbuffers::WIPOffset<WorldStateUpdate<'a>> {
    let o = self.fbb_.end_table(self.start_);
    self.fbb_.required(o, WorldStateUpdate::VT_SIMULATION_ID,"simulation_id");
    flatbuffers::WIPOffset::new(o.value())
  }
}

impl core::fmt::Debug for WorldStateUpdate<'_> {
  fn fmt(&self, f: &mut core::fmt::Formatter<'_>) -> core::fmt::Result {
    let mut ds = f.debug_struct("WorldStateUpdate");
      ds.field("timestamp_ns", &self.timestamp_ns());
      ds.field("simulation_id", &self.simulation_id());
      ds.field("current_tick", &self.current_tick());
      ds.field("agents", &self.agents());
      ds.field("food_pellets", &self.food_pellets());
      ds.finish()
  }
}
#[inline]
/// Verifies that a buffer of bytes contains a `WorldStateUpdate`
/// and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_world_state_update_unchecked`.
pub fn root_as_world_state_update(buf: &[u8]) -> Result<WorldStateUpdate, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root::<WorldStateUpdate>(buf)
}
#[inline]
/// Verifies that a buffer of bytes contains a size prefixed
/// `WorldStateUpdate` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `size_prefixed_root_as_world_state_update_unchecked`.
pub fn size_prefixed_root_as_world_state_update(buf: &[u8]) -> Result<WorldStateUpdate, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root::<WorldStateUpdate>(buf)
}
#[inline]
/// Verifies, with the given options, that a buffer of bytes
/// contains a `WorldStateUpdate` and returns it.
/// Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_world_state_update_unchecked`.
pub fn root_as_world_state_update_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<WorldStateUpdate<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::root_with_opts::<WorldStateUpdate<'b>>(opts, buf)
}
#[inline]
/// Verifies, with the given verifier options, that a buffer of
/// bytes contains a size prefixed `WorldStateUpdate` and returns
/// it. Note that verification is still experimental and may not
/// catch every error, or be maximally performant. For the
/// previous, unchecked, behavior use
/// `root_as_world_state_update_unchecked`.
pub fn size_prefixed_root_as_world_state_update_with_opts<'b, 'o>(
  opts: &'o flatbuffers::VerifierOptions,
  buf: &'b [u8],
) -> Result<WorldStateUpdate<'b>, flatbuffers::InvalidFlatbuffer> {
  flatbuffers::size_prefixed_root_with_opts::<WorldStateUpdate<'b>>(opts, buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a WorldStateUpdate and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid `WorldStateUpdate`.
pub unsafe fn root_as_world_state_update_unchecked(buf: &[u8]) -> WorldStateUpdate {
  flatbuffers::root_unchecked::<WorldStateUpdate>(buf)
}
#[inline]
/// Assumes, without verification, that a buffer of bytes contains a size prefixed WorldStateUpdate and returns it.
/// # Safety
/// Callers must trust the given bytes do indeed contain a valid size prefixed `WorldStateUpdate`.
pub unsafe fn size_prefixed_root_as_world_state_update_unchecked(buf: &[u8]) -> WorldStateUpdate {
  flatbuffers::size_prefixed_root_unchecked::<WorldStateUpdate>(buf)
}
#[inline]
pub fn finish_world_state_update_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(
    fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>,
    root: flatbuffers::WIPOffset<WorldStateUpdate<'a>>) {
  fbb.finish(root, None);
}

#[inline]
pub fn finish_size_prefixed_world_state_update_buffer<'a, 'b, A: flatbuffers::Allocator + 'a>(fbb: &'b mut flatbuffers::FlatBufferBuilder<'a, A>, root: flatbuffers::WIPOffset<WorldStateUpdate<'a>>) {
  fbb.finish_size_prefixed(root, None);
}
}  // pub mod state
}  // pub mod simulation
}  // pub mod fes

