// Code generated by the FlatBuffers compiler. DO NOT EDIT.

package state

import (
	flatbuffers "github.com/google/flatbuffers/go"
)

type WorldStateUpdate struct {
	_tab flatbuffers.Table
}

func GetRootAsWorldStateUpdate(buf []byte, offset flatbuffers.UOffsetT) *WorldStateUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset:])
	x := &WorldStateUpdate{}
	x.Init(buf, n+offset)
	return x
}

func FinishWorldStateUpdateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.Finish(offset)
}

func GetSizePrefixedRootAsWorldStateUpdate(buf []byte, offset flatbuffers.UOffsetT) *WorldStateUpdate {
	n := flatbuffers.GetUOffsetT(buf[offset+flatbuffers.SizeUint32:])
	x := &WorldStateUpdate{}
	x.Init(buf, n+offset+flatbuffers.SizeUint32)
	return x
}

func FinishSizePrefixedWorldStateUpdateBuffer(builder *flatbuffers.Builder, offset flatbuffers.UOffsetT) {
	builder.FinishSizePrefixed(offset)
}

func (rcv *WorldStateUpdate) Init(buf []byte, i flatbuffers.UOffsetT) {
	rcv._tab.Bytes = buf
	rcv._tab.Pos = i
}

func (rcv *WorldStateUpdate) Table() flatbuffers.Table {
	return rcv._tab
}

func (rcv *WorldStateUpdate) TimestampNs() int64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(4))
	if o != 0 {
		return rcv._tab.GetInt64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldStateUpdate) MutateTimestampNs(n int64) bool {
	return rcv._tab.MutateInt64Slot(4, n)
}

func (rcv *WorldStateUpdate) SimulationId() []byte {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(6))
	if o != 0 {
		return rcv._tab.ByteVector(o + rcv._tab.Pos)
	}
	return nil
}

func (rcv *WorldStateUpdate) CurrentTick() uint64 {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(8))
	if o != 0 {
		return rcv._tab.GetUint64(o + rcv._tab.Pos)
	}
	return 0
}

func (rcv *WorldStateUpdate) MutateCurrentTick(n uint64) bool {
	return rcv._tab.MutateUint64Slot(8, n)
}

func (rcv *WorldStateUpdate) Agents(obj *AgentState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *WorldStateUpdate) AgentsByKey(obj *AgentState, key string) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *WorldStateUpdate) AgentsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(10))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func (rcv *WorldStateUpdate) FoodPellets(obj *FoodPelletState, j int) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		x += flatbuffers.UOffsetT(j) * 4
		x = rcv._tab.Indirect(x)
		obj.Init(rcv._tab.Bytes, x)
		return true
	}
	return false
}

func (rcv *WorldStateUpdate) FoodPelletsByKey(obj *FoodPelletState, key string) bool {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		x := rcv._tab.Vector(o)
		return obj.LookupByKey(key, x, rcv._tab.Bytes)
	}
	return false
}

func (rcv *WorldStateUpdate) FoodPelletsLength() int {
	o := flatbuffers.UOffsetT(rcv._tab.Offset(12))
	if o != 0 {
		return rcv._tab.VectorLen(o)
	}
	return 0
}

func WorldStateUpdateStart(builder *flatbuffers.Builder) {
	builder.StartObject(5)
}
func WorldStateUpdateAddTimestampNs(builder *flatbuffers.Builder, timestampNs int64) {
	builder.PrependInt64Slot(0, timestampNs, 0)
}
func WorldStateUpdateAddSimulationId(builder *flatbuffers.Builder, simulationId flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(1, flatbuffers.UOffsetT(simulationId), 0)
}
func WorldStateUpdateAddCurrentTick(builder *flatbuffers.Builder, currentTick uint64) {
	builder.PrependUint64Slot(2, currentTick, 0)
}
func WorldStateUpdateAddAgents(builder *flatbuffers.Builder, agents flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(3, flatbuffers.UOffsetT(agents), 0)
}
func WorldStateUpdateStartAgentsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WorldStateUpdateAddFoodPellets(builder *flatbuffers.Builder, foodPellets flatbuffers.UOffsetT) {
	builder.PrependUOffsetTSlot(4, flatbuffers.UOffsetT(foodPellets), 0)
}
func WorldStateUpdateStartFoodPelletsVector(builder *flatbuffers.Builder, numElems int) flatbuffers.UOffsetT {
	return builder.StartVector(4, numElems, 4)
}
func WorldStateUpdateEnd(builder *flatbuffers.Builder) flatbuffers.UOffsetT {
	return builder.EndObject()
}
